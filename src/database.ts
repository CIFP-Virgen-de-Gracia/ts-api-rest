/**
 * CONFIGURACI√ìN DE ACESO AL SERVIDOR DE BASE DE DATOS
 * Configuraci√≥n MongoDB
 */

// Librer√≠as
import mongoose from 'mongoose';
import chalk from 'chalk';
import env from './env';

/**
 * configuraci√≥n de conexi√≥n a la base de datos siguiendo un patr√≥n singleton
 */
class Database {
  private conn!: mongoose.Connection;

  /**
   * Devuelve el objeto de conexi√≥n
   */
  connection() {
    return this.conn;
  }

  /**
   * Se conecta a la conexi√≥n indicada. Se realiza por promesas, es decir, hasta que no se cumpla la promesa, espera el proceso del servidor
   */
  connect() {
    // Creamos una cadena de conexi√≥n seg√∫n los par√°metros de .env. Ojo que esta partida la l√≠nea, poner ?authSource=admin para autenticarse en Mogo Docker local
    const host = `${env.DB_PROTOCOL}://${env.DB_USER}:${env.DB_PASS}@${env.DB_URL}:${env.DB_PORT}/${env.DB_NAME}?authSource=admin&retryWrites=true&w=majority`;

    // Definimos una promesa que se resollver√° si nos conecatmos correctamente
    return new Promise<mongoose.Connection>((resolve) => {
      // Configuramos el la conexi√≥n del cliente Mongo
      const options = {
        poolSize: env.DB_POOLSIZE,
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useCreateIndex: true,
        // useFindAndModify: false, // si no salta las funciones deprecated
      };

      mongoose.set('debug', env.DB_DEBUG); // activamos  el modo depurador si as√≠ lo tenemos en nuestro fichero
      mongoose.Promise = global.Promise;

      // Creamos la cenexi√≥n
      this.conn = mongoose.createConnection(host, options);

      // Si hay un error, salimos de la apliaci√≥n
      this.conn.on('error', (err) => {
        if (process.env.NODE_ENV !== 'test') {
          console.error(chalk.red('‚ùå MongoDB Error', err));
        }
        return process.exit();
      });

      // Si recibimos el evento conectamos
      this.conn.on('connected', () => {
        if (process.env.NODE_ENV !== 'test') {
          console.log(chalk.green(`üü¢ Conectado al Servidor MogoDB ‚úÖ -> http://${env.DB_URL}:${env.DB_PORT}`));
        }
        resolve(this.conn); // Resolvemos la promesa
      });
    });
  }
}

/**
 * Devuelve la instancia de conexi√≥n siempre la misma, singleton
 */
const instance = new Database();

// Devolvemos el m√≥dulo
export default instance;
